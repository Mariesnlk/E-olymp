import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class Wormix {
    static int knapsack(int W, int wt[], int val[], int n) {
        int i,w;
        int K[][] = new int[n+1][W+1];
        for(i=0; i<=n; i++) {
            for(w=0;w<=W; w++) {
                if(i==0||w==0)
                    K[i][w]=0;
                else if(wt[i-1]<=w)
                    K[i][w]=max(val[i-1]+K[i-1][w-wt[i-1]], K[i-1][w]);
                else K[i][w]=K[i-1][w];
            }
        }
        return K[n][W];
    }
    static int max(int a, int b) {
        return (a > b) ? a : b;
    }

    static boolean check(int[] arr, int p) {
        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum += arr[i];
        }
        return sum >= p ? true : false;
    }

    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String[] firstLine = br.readLine().split(" ");

        int n = Integer.parseInt(firstLine[0]);
        int W = Integer.parseInt(firstLine[1]);
        int points[] = new int[n];
        int minutes[] = new int[n];

        for (int i = 0; i < n; i++) {
            String s = br.readLine();
            String[] inLine = s.split(" ");
            points[i] = Integer.parseInt(inLine[0]);
            minutes[i] = Integer.parseInt(inLine[1]);
        }
        br.close();
        if (!check(points, W)) {
            System.out.println("-1");
            return;
        }
        int sumW = 0, sumP = 0;
        for (int i = 0; i < points.length; i++) {
            sumW += minutes[i];
            sumP += points[i];
        }
        int answer = knapsack(sumP - W, points, minutes, points.length);
        System.out.println(sumW - answer);

    }

}
